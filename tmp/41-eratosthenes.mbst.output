LetStmt inherits Stmt>>interp: (LetStmt (VarExpr #n) (NumExpr 100.0))
DimStmt inherits Stmt>>interp: (DimStmt (ArrayExpr #sieve) (VarExpr #n))
LetStmt inherits Stmt>>interp: (LetStmt (VarExpr #i) (NumExpr 2.0))
LetStmt inherits Stmt>>interp: (LetStmt (BinopExpr #aput (ArrayExpr #sieve) (VarExpr #i)) (NumExpr 1.0))
LetStmt inherits Stmt>>interp: (LetStmt (VarExpr #i) (BinopExpr #+ (VarExpr #i) (NumExpr 1.0)))
IfStmt inherits Stmt>>interp: (IfStmt (BinopExpr #< (VarExpr #i) (VarExpr #n)) #init)
LetStmt inherits Stmt>>interp: (LetStmt (VarExpr #prime) (NumExpr 2.0))
IfStmt inherits Stmt>>interp: (IfStmt (BinopExpr #= (BinopExpr #aget (ArrayExpr #sieve) (VarExpr #prime)) (NumExpr 0.0)) #next)
 0.0
LetStmt inherits Stmt>>interp: (LetStmt (VarExpr #i) (BinopExpr #* (VarExpr #prime) (NumExpr 2.0)))
GotoStmt inherits Stmt>>interp: (GotoStmt #punch)
LetStmt inherits Stmt>>interp: (LetStmt (BinopExpr #aput (ArrayExpr #sieve) (VarExpr #i)) (NumExpr 0.0))
LetStmt inherits Stmt>>interp: (LetStmt (VarExpr #i) (BinopExpr #+ (VarExpr #i) (VarExpr #prime)))
IfStmt inherits Stmt>>interp: (IfStmt (BinopExpr #< (VarExpr #i) (VarExpr #n)) #loop)
LetStmt inherits Stmt>>interp: (LetStmt (VarExpr #prime) (BinopExpr #+ (VarExpr #prime) (NumExpr 1.0)))
IfStmt inherits Stmt>>interp: (IfStmt (BinopExpr #< (VarExpr #prime) (VarExpr #n)) #primes)
